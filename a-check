#!/bin/bash 

#function to check that swift works
check_swift_connection () {
  test=$(swift stat 2> /dev/null | grep -c "Account:")
    
    if [[ $test -lt 1 ]]
    then 
      #if [ -n "$ACTIVE_TOKEN" ]; then
      #   unset OS_AUTH_TOKEN
      #   export OS_AUTH_TOKEN=$(check_atoken)
      #   #echo "New  OS_AUTH_TOKEN = $OS_AUTH_TOKEN"
      #fi
      
    if [[ -n "$OS_PASSWORD" ]]; then 
      if  [[ $silent -eq 0 ]] ; then     
          echo "Updating token"
      fi
      source $allas_conf_path --user $user -k $OS_PROJECT_NAME -f 
    fi
    test=$(swift stat 2> /dev/null | grep -c "Account:")
    if [[ $test -lt 1 ]]
    then 
       echo "No connection to Allas!"
       echo "Please try setting the the connection again."
       exit 1
    else
      echo "swift connection updated"
    fi
  else 
     echo "swift connection OK" 
  fi 
}

#Function to remove the trailing / if it exist
remove_slash_from_ends(){
path_string=$1
if [[ ${path_string:(-1)} == "/" ]]; then
    path_string =${path_string%/}
fi

if [[  ${path_string:0:1} == "/" ]]; then
    tlen=${#path_string}
    path_string=${path_string:1:tlen}
fi

echo $path_string
}

if [[ $# -lt 1 ]]
then
  echo "Please give the name of a directory or file to be checked as an argument of this command."
  echo ""
  exit 1
fi

start_time=$(date +%s)

#default user
user="$USER"
compression=1

#read static variables
inst_root="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
#inst_root=$(dirname $(readlink -f $0))


source $inst_root/a_env_conf

#local variables
bucket_name="not_defined"
fixed_bucket=0
tmp_file="not_defined"
print_help=0
os_project_name="none"
input_def=""
mode="swift"
silent=1
tmp_dir="${tmp_root}/a_put_$$_tmp"
vastaus="x"
free_space_check=1
filelist_level=0
cumulative_size=0
override_mode=0
quick_check=0
abspath() { old=`pwd`;new=$(dirname "$1");if [ "$new" != "." ]; then cd $new; fi;file=`pwd`/$(basename "$1");cd $old;echo $file; }

#Process command line
while [[ $# -ge 1 ]]
do
  case "$1" in
             '--bucket' | '-b' )
             # query file
                  bucket_name="$2"
                  bucket_name=$(remove_slash_from_ends $bucket_name)
                  fixed_bucket=1
                  shift
                  shift
                ;;
             '--project' | '-p' )
                  os_project_name=($2)
                  shift
                  shift
                ;;
             '--object' | '-o' )
                  tmp_file="$2"
                  slashcheck=$(echo $tmp_file | grep -c "/")
                  if [[ $slashcheck -gt 0 ]]; then
                     echo "Slash characters (/) are not allowed when object name is defiend with -o option" 
                     echo "If you want to use slash characters to define a pseudo folder path, add that part of"
                     echo "object name to the bucket definition (-b):"
                     echo
                     echo "     a-put -b bucket-name/pseudo/folder/path -o rest-of-object-name "
                     exit 1
                  fi

                  shift
                  shift
                ;;
             '--compress' | '-c')
                  compression=(1)
                  shift
                ;;              
             '--nc' | '-n' )
                  compression=(0)
                  shift
                ;;
             '-s' | '--silent' )
                  silent=(1)
                  shift
                ;;
             '-h' | '--help' )
                  print_help=(1)
                  shift
                ;;
             '--user' | '-u' )
                  user=("$2")
                  shift
                  shift
                ;;
             '--quick' | '-q' )
                  quick_check=1
                  shift
                  shift
              ;;


             '--tmpdir' | '-t' )
                  tmp_root=("$2")
                  tmp_dir=("${tmp_root}/a_put_$$_tmp")  
                  shift
                  shift
                ;;
              '-x')
                  free_space_check=0
                  shift
                ;;
              '--simple-filelist')
                 filelist_level=1
                 shift
                ;;
              '--skip-filelist')
                 filelist_level=2
                 shift
                ;;
              '--override')
                 override_mode=1
                 shift
                ;;
               '--input-list')
                  list_file=$2
                  if [[ -e $list_file ]];then
                    input_def=("$(cat $list_file)")                
                  else  
                    echo "Import file list $list_file not found"
                    exit 1  
                  fi 
                  shift
                  shift
                ;;
               
             *)
                   input_def=("$input_def $1")
                   shift                       # No more switches
                ;;
    esac
done

if [ $print_help -eq 1 ]; then
cat <<EOF
This tool is used to check if Allas already includes objects that would matching objects
that a-put would create. This command can be use check the success of a data upload process
done with a-put. Aternatively, the results can be used to list objects that need to be removed 
or renamed, before uploading a new version of a dataset to Allas

For example, if you have uploaded a directory to Allas using command:

   a-put datadir/*

You can use command:

   a-check datadir/*

To check if all the directrories and file have corresponding objects in Allas.
If you have defided the bucket with option -b, you must include this option
in the a-check command too:

  a-put -b 123_bukcet datadir/*

Checking:

  a-check -b 123_bukcet datadir/*   
 


By default this tool performs following operations:

1. Ensures that you have working connection to Allas storage service and 
defines the project that will be used to store the data.

2. In case of directory, the content of the directory is collected into a single file
(using tar command).

3. By default option --compress (-c), is used. This means that the data is compressed using zstdmt command.
   This is the recommended way if you will be using the data only in CSC computing servers. 
   If you plan to use the uploaded dataset in other that Linux servers, where zstdmt compression may not be available,
   you can disable compression with option --nc (-n).

4. The data is uploaded to Allas using rclone command and swift protocol.

The location were data is stored in allas can be defined with options
--bucket (-b) and --object (-o).

The default option is that data that locates in 
  a) $SCRATCH in Puhti is uploaded to bucket:  project_number-puhti-SCRATCH

  b) $PROJAPPL in Puhti is uploaded to bucket:  project_number-puhti-PROJAPPL

  c) $WRKDIR in Taito is uploaded to bucket:  username-project_number-taito-WRKDIR 

  c) in other cases the data uploaded to: username-poject_number-MISC

For example for user kkaytaj belonging in project_12345, data locatioing in home directory
will be uploaded to bucket:  kkayttaj-12345-MISC.

The compressed dataset will be stored as one object. The object name depends on the
file name and location.  The logic used is that the possible subdirectory path in Taito or Puhti is included 
in the object name. E.g. a file called test_1.txt in $WRKDIR can be stored with commands:

   cd $WRKDIR
   a-put test_1.txt

In this case the file is stored to bucket: kkayttaj-12345-taito-WRKDIR
as object: test_1.txt.zst

If you have another file called test_1.txt that locates in directory $WRKDIR/project2/sample3
you can store it with commands:
   
  cd $WRKDIR/project2/sample3
  a-put test_1.txt
  
Or commmands
  cd $WRKDIR
  a-put project2/sample3/test_1.txt

Note that the cheking is done only based on the names of files, directories and objects.
The contents if files and objects is not checked!


Options

-b, --bucket <bucket_name>  Define a name of the bucket into which the data is uploaded.

-p, --project <project_ID>  Upload data into buckets of the defined project in stead of the currently configured project.

-o, --object <object_name>  Define a name for the new object to be created.

-n, --nc                    Do not compress the data that will be uploaded.

-h, --help                  Print this help.

-q, --quick                 Check just the names of objects. Not sizes or dates.
                            This makes checking process much faster, but you will
                            not get more information than just the names about the objects.

-u, --user                  Define username liked to the data to be uploaded

--input-list                Give a file that lists the files or directtories to be checked. 

Related commands: a-put, a-list, a-info, a-delete
EOF

exit 

fi 

#Assign project to be used if not defined 
if [ $os_project_name == "none" ]
then
  if [ -e $HOME/.allas_default ]
  then
     source $HOME/.allas_default
     if [[ $os_project_name != $OS_PROJECT_NAME ]]
     then 
        echo "Switching allas configuration to use project $os_project_name"
        source $allas_conf_path -f  -user $user $os_project_name
     fi 
  else
     echo "Default project is not defined"
     source $allas_conf_path -user $user
     echo "os_project_name=$OS_PROJECT_NAME" > $HOME/.allas_default
     echo "Default allas project is stored to  \$HOME/.allas_default"
     echo ""
  fi
fi
source $HOME/.allas_default


#Check if zstdmt is needed and available
if [[ $compression -eq 1 ]]; then
   if [[ $(which zstdmt 2> /dev/null | wc -l ) -ne 1 ]];then
      echo "Compression command: zstdmt is not available"
      echo "Please install zstdmt or use option --nc:"
      echo "  a-put --nc "
      echo "to skip zstdmt compression during upload."
      exit 1
   fi
fi

#Check if rclone is needed and available
if [[ $mode == "swift" ]]; then
   if [[ $(which rclone 2> /dev/null | wc -l ) -ne 1 ]];then
      echo ""
      echo "rclone is not available!"
      echo "Please install rclone."
      exit 1
   fi
fi

#check free space in $WRKDIR
if [[ $free_space_check -eq 1 ]]; then
  if [[ $(which lfs 2> /dev/null | wc -l ) -eq 1 ]]
  then
    if [[ $local_host == "taito" ]];then
       quota_s=($(lfs quota -q -u $USER $WRKDIR | tail -1 ))
       free_space=$(expr ${quota_s[2]} - ${quota_s[1]})
    fi
    if [[ $local_host == "puhti" ]];then
      projnum=$(echo $tmp_root | awk -F "_" '{ print $2}')
      (( lproj = 600000000 + projnum ))
      #  echo "lfs quota -p $lproj $tmp_root"
      #lfs quota -p $lproj $tmp_root
      quota_s=($(lfs quota -p $lproj $tmp_root | tail -1 ))
      free_space=$(expr ${quota_s[1]} - ${quota_s[0]})
    fi
  else
    free_space=$(df $tmp_root | tail -1 | awk '{print $4}')
  fi
else
    free_space=10000000000
fi

if [[ $silent -eq 0 ]] ; then
 echo "Files or directories to be uploaded: $input_def"
fi

#Check if connection works
if [[ $mode == "swift" ]]
then
  if [[ $silent -eq 0 ]] ; then 
      check_swift_connection 
  else 
      check_swift_connection > /dev/null
  fi
fi

mkdir $tmp_dir

#Table header"
printf "%45s %80s %25s %s\n" "Local file or directory" "Matching object in Allas" "Object size and date"
echo "---------------------------------------------------------------------------------------------------------------------------------------------------------"

for input in $input_def
do
  #Check if connection works and update if needed and possible
  if [[ $mode == "swift" ]]
  then
    if [[ $silent -eq 0 ]] ; then 
      check_swift_connection 
    else 
      check_swift_connection > /dev/null
    fi
  fi

  filelist_level_orig=$filelist_level
  if [[ $silent -eq 0 ]] ; then
     echo "Processing: $input"
  fi
  if [[ ! -e $input ]] ; then
    echo "File or directory $input does not exist!"
    exit 1
  fi 

  #Remove the trailing / if it exist
  if [ $(echo -n $input | tail -c 1) == "/" ]
  then
    sl=$(expr ${#input} - 1)
    input=$(echo $input | cut -c 1-$sl)
  fi
 
  #check that file name does not end with _ameta
  if [[ ${input:(-6):6} == "_ameta" ]]; then
    echo "Found a file/directoryname which ends with _ameta"
    echo "  $input"
    echo ""
    echo "Please rename this file as it will mix up a the metadata management of a-put"
    exit 1
  fi

  file_path=$(abspath $input)
  if [[ $silent -eq 0 ]] ; then
     echo "Checking total size of $input. Please wait."
  fi
  tot_size=$(du -s $input | cut -f1)
  (( cumulative_size = cumulative_size + tot_size ))
  #echo $tot_size

  #tmp file name. Depends on compression and if file is a directory
  if [  $tmp_file == "not_defined" ]
  then
    if [[ $(file -b "$input" | grep -c directory ) -ne 1 ]]
    then
       if [[ $compression -eq 1 ]]; then
          tmp_file=($(basename "$input" | tr " " "_" )".zst")
       else 
          tmp_file=($(basename "$input" | tr " " "_" ))
       fi
    else
       tmp_file=($(basename "$input" | tr " " "_" )".tar.zst")
    fi
    tmp_file=$(remove_slash_from_ends $tmp_file)
  fi

  #Tarkista ollaanko koti vai työhakemistossa ja valitse ämpäri
  #sen perusteella
  project_label=$(echo ${os_project_name} |  sed -e s/"project_"/""/g)
  if [ $bucket_name == "not_defined" ]
  then
     ## Taito
     #Taito home
     bucket_name=("${user}-${project_label}-MISC")
     if [ $(echo $file_path  | cut -c1-14) == "/homeappl/home" ]
     then
        bucket_name=("${user}-${project_label}-${local_host}-HOME")
        partial_path=$(dirname $file_path | sed -e s/"\/homeappl\/home\/$user"/""/g)
     fi
     #Taito wrk
     if [ $(echo $file_path  | cut -c1-5) == "/wrk/" ]
     then
        bucket_name=("${user}-${project_label}-${local_host}-WRKDIR")
        partial_path=$(dirname $file_path | sed -e s/"\/wrk\/$user"/""/g)
     fi

     #Taito proj
     if [ $(echo $file_path  | cut -c1-6) == "/proj/" ]
     then
        bucket_name=("${user}-${project_label}-${local_host}-PROJ")
        partial_path=$(dirname $file_path | sed -e s/"\/proj"/""/g)
     fi

 
     ## Puhti
     # In Puhti we check if puhti-project and Allas project match
     #Puhti scratch
     if [ $(echo $file_path  | cut -c1-8) == "/scratch" ]
     then
        puhti_project=$(echo $file_path/ |awk -F "/" '{print $3}')
        bucket_name=("${project_label}-${local_host}-SCRATCH")
        if [[  $os_project_name  != $puhti_project ]] && [[ $vastaus != "y" ]] ; then
          echo ""
          echo "NOTE: data locates in Scratch area of project: $puhti_project"
          echo "But it will be stored to Allas under project: $os_project_name"
          echo "Bucket to be used is: $bucket_name"
          echo ""
          echo "Is this OK (y/n)?"
          read vastaus
          if [[ $vastaus != "y" ]]; then
             echo "Exiting, data not uploaded."
             exit 0
          fi
        fi
        partial_path=$(dirname $file_path | sed -e s/"\/scratch\/$puhti_project"/""/g)
     fi
     #Puhti projappl
     if [ $(echo $file_path  | cut -c1-9) == "/projappl" ]
     then
        puhti_project=$(echo $file_path/ |awk -F "/" '{print $3}')
        bucket_name=("${project_label}-${local_host}-PROJAPPL")
        if [[  $os_project_name  != $puhti_project ]] && [[ $vastaus != "y" ]] ; then
          echo ""
          echo "NOTE: data locates in ProjAppl area of project: $puhti_project"
          echo "But it will be stored to Allas under project: $os_project_name"
          echo "Bucket to be used is: $bucket_name"
          echo "Is this OK (y/n)?"
          read vastaus
          if [[ $vastaus != "y" ]]; then
             echo "Exiting, data not uploaded."
             exit 0
          fi
        fi
        partial_path=$(dirname $file_path | sed -e s/"\/projappl\/$puhti_project"/""/g)
     fi
     partial_path=$(remove_slash_from_ends $partial_path)
  fi 

  #Check if stored file already exitst
  #echo "rclone ls ${storage_server}:${bucket_name}/${partial_path}/$tmp_file"
  is_uploaded=0
  if [[ $partial_path == "" ]]; then
    if [[ $(rclone ls ${storage_server}:${bucket_name}/$tmp_file 2> /dev/null | wc -c) -gt 0 ]]
    then
        is_uploaded=1
        allas_object="${bucket_name}/${tmp_file}"
        if [[ $quick_check -eq 0 ]]; then
          ainfo=$(swift stat --lh ${bucket_name}  $tmp_file | grep "Length:\|Modified:" | awk -F ":" '{ print $2":"$3}' | tr -d "\n" )
        else
          ainfo="quick mode: Object details not checked"
        fi
    fi
  else
    if [[ $(rclone ls ${storage_server}:${bucket_name}/${partial_path}/$tmp_file 2> /dev/null | wc -c) -gt 0 ]]
    then
        is_uploaded=1
        allas_object="${bucket_name}/${partial_path}/${tmp_file}"
    if [[ $quick_check -eq 0 ]]; then
        ainfo=$(swift stat --lh ${bucket_name}  ${partial_path}/$tmp_file | grep "Length:\|Modified:" | awk -F ":" '{ print $2":"$3}' | tr -d "\n" )
    else
        ainfo="quick mode: Object details not checked"
    fi
  fi
  
  #Print results
  if [[ $is_uploaded -eq 1 ]]; then
    printf "%45s %80s %25s %s\n" "$input" "$allas_object" "$ainfo" "GMT"
   else
    echo " "
    printf  "%45s %80s\n" "$input" "No matching object in Allas!"
    echo " "
    echo "$input" >>  ${tmp_dir}/missing_files.txt
  fi

  tmp_file="not_defined"

done

if [[ -e "${tmp_dir}/missing_files.txt" ]];then
  echo "-----------------------------------------------------------------"
  echo ""
  echo "Following local files or directories do not have a matching object in Allas:"
  cat ${tmp_dir}/missing_files.txt
  cp  ${tmp_dir}/missing_files.txt ./missing_${bucket_name}_$$
  echo ""
  echo "The names of missing files or directories, listed above, are stored to file:"
  echo "     /missing_${bucket_name}_$$"
  echo "-----------------------------------------------------------------"
else
  echo "-----------------------------------------------------------------"
  echo ""
  echo "All files or directories matching to the input definition have a matching object in Allas"
  echo "Note that the check is based only on the names of files and directories."
  echo "The actual content of the objects is not checked!"

fi


rm -f ${tmp_dir}/missing_files.txt
rmdir  ${tmp_dir}


exit 0
