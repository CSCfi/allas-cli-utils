#!/bin/bash

export OS_PROJECT_NAME=""
export OS_PROJECT_ID=""
export OS_STORAGE_URL=""
export OS_AUTH_TOKEN=""
export OS_USERNAME=$(whoami)
export OS_AUTH_URL=https://pouta.csc.fi:5001/v3
export OS_USER_DOMAIN_NAME="Default"
export OS_REGION_NAME="regionOne"
export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=3






allas_conf_scope () {

local usage="

Usage: source allas_conf [OPTIONS] [PROJECT]

    This script sets up the environment variables and the configuration
    files for accessing Allas storage service https://a3s.fi using swift
    (default) and/or s3cmd APIs.

    The program asks your CSC password before starting the configuration
    process.

    If the project name is not given as PROJECT argument, the available
    project names are listed and you are asked to choose one.

    By default, this tool sets up access tokens that are used by swift and
    rclone connections.


    OPTIONS
    -------

     -m, --mode s3cmd         Configure s3cmd API (default: swift)

     -m, --mode both          Configure both swift and s3cmd APIs

     -u, --user USER          Storage server username (default: $USER)

     -k, --keeppasswd         Keep OS_PASSWORD environment variable once the
                              configuration is done. This can be useful if you
                              use this tool in scripts that need to switch between 
                              projects or re-open Allas connection

     -c, --chuncksize SIZE    s3cmd chunk size, 5-5000, Files larger than
                              SIZE, in MB, are automatically uploaded
                              multithread-multipart  (default: 5000)

      -s, --silent            Less output

      -f, --force             Skip check that tries to ensure that this command is
                              sourced correctly. This option needs to ne used in batch jobs.

    DEPENDENCIES
    ------------

    This script uses openstack and swift/s3cmd utilities, which in
    puhti.csc.fi are available using

        module load allas

    On other machines these need to be installed separately, see README.md
    for example.
"

local storage_service=("allas")
local show_keys=false
local keep_password=false
local silent_mode=false
local active_mode=false
local echop=echo
local chunk_size=5000
local rconf=$HOME/.config/rclone/rclone.conf
local mode=swift
local force=false
#auth_method options are curl and swift
local auth_method=curl
#these are used in curl authentication
local token_header_re='^X-Subject-Token: '
local storage_url_re='https://a3s.fi:443/swift'
local storage_url_interface_re='"interface": "public"'
local storage_url_sed='s+.*"\(https://a3s.fi:443/swift/[A-Za-z0-9/_]*\)".*+\1+'


# Process command line arguments

while [[ $# -ge 1 ]]; do
    case "$1" in
        '-h'|'-help'|'--help')  echo "$usage";           return 0;;
        '-m'|'--mode')          mode="$2";               shift 2;;
        '-w'|'--show_keys')     show_keys=true;          shift;;
        '-u'|'--user'|'-user')  export OS_USERNAME="$2"; shift 2;;
        '-k'|'--keeppasswd')    keep_password=true;      shift;;
        '-s'|'--silent')        echop=:;                 shift;;
        '-c'|'--chunksize')     chunk_size="$2";         shift 2;;
        '-a'|'--active-token')  active_mode=true;        shift;;
        '-f'|'--force' )        force=true;              shift;;
        '--swift-auth' )        auth_method=swift;       shift;;
        '-p'|'--project' )
          if [[ -z $2 ]]; then
              if [[ ${2::1} != "-" ]];then
                export OS_PROJECT_NAME="$2"
                shift 
              else
                export OS_PROJECT_NAME="" 
              fi
          else 
              export OS_PROJECT_NAME=""
          fi    
          shift
          ;; 
        *) export OS_PROJECT_NAME="$1";                  shift;;
    esac
done

# check if this is executed as sourced command
if [ "$0" != "bash" -a "$0" != "-bash" -a "$0" != "/bin/bash" -a "$force" == "false" ]; then
    echo "Error: allas_conf should not be executed directly. $usage" >&2
    exit 1
fi

case "$mode" in
    's3cmd')
        local use_swift=false
        local use_s3cmd=true
        ;;
    'both')
        local use_swift=true
        local use_s3cmd=true
        ;;
     'swift')
        local use_swift=true
        local use_s3cmd=false
        ;;  
    *)
        echo "Error: Wrong argument to '--mode' option $usage" >&2
        return 1
        ;;
esac

if [[ "$chunk_size" -lt 5 || "$chunk_size" -gt 5000 || \
          ! "$chunk_size" =~ ^[0-9]+$ ]]; then
    echo "\nError: Invalid chuck size. $usage" >&2
    return 1
fi

if ! $keep_password; then
    trap 'unset OS_PASSWORD; trap - RETURN EXIT SIGINT' RETURN EXIT SIGINT
fi


# Check availability of command line tools

if [ -z "$OS_PROJECT_NAME" ] && ! command -v openstack >/dev/null 2>&1; then
    echo -e "\nError: openstack command not found!" >&2
    return 1
fi

if $use_s3cmd && ! command -v s3cmd >/dev/null 2>&1; then
        echo -e "\nError: s3cmd command not found!" >&2
        return 1
fi

if [[ $auth_method == "swift" ]];then 
   if ! command -v swift >/dev/null 2>&1; then
      echo -e "\nError: swift command not found!" >&2
      return 1
   fi
else   
   if ! command -v curl >/dev/null 2>&1; then
      echo -e "\nError: curl command was not found."
      return 1
   fi
fi

if ! command -v rclone >/dev/null 2>&1; then
    echo "NOTE: rclone command was not found."
fi

if ! command -v restic >/dev/null 2>&1; then
    echo "NOTE: restic command was not found."
fi

if ! command -v curl >/dev/null 2>&1; then
    echo "NOTE: curl command was not found."
fi

# Ask for CSC password

if [ -z "$OS_PASSWORD" ]; then
   echo "Please enter CSC password for account ${OS_USERNAME}: "
   read -sr OS_PASSWORD
   export OS_PASSWORD
fi


# Assign the project to be used.

if [ -z "$OS_PROJECT_NAME" ]; then
   echo "Checking projects available for your account."
   echo "Please wait."

   #unset pythonpaath temporarily
   activePythonPath=$PYTHONPATH
   unset PYTHONPATH

   local all_projects=(
       $(openstack project list \
                   --my-projects -c Name -f value --os-username $OS_USERNAME))

   case ${#all_projects[@]} in
       0)
           echo "Error: No Allas projects found!" >&2
           echo "Please check that you typed your password correctly" >&2
           return 1
           ;;
       1)
           export OS_PROJECT_NAME=${all_projects[0]}
           echo "Configuration will be done for project: $OS_PROJECT_NAME"
           ;;
       *)
           PS3="Please choose a project by giving an item number form the list above: "
           local project
           select project in "${all_projects[@]}" "abort allas_conf"; do
               [[ -n "$project" ]] && break
           done
	   if [[ "$project" == "abort allas_conf" ]]; then
	       return 1
	   fi
           export OS_PROJECT_NAME=$project
           ;;
   esac
   export PYTHONPATH=$activePythonPath
fi

#rclone configuration file check
if [[ $(grep -c "\[$storage_service\]"  $HOME/.config/rclone/rclone.conf 2> /dev/null ) -lt 1 ]]; then
       mkdir -p  $HOME/.config/rclone/
       echo '['"$storage_service"']' >> $HOME/.config/rclone/rclone.conf 
       echo 'type = swift' >>  $HOME/.config/rclone/rclone.conf 
       echo 'env_auth = true'  >>  $HOME/.config/rclone/rclone.conf
       if [[ $silent_mode = "false" ]]; then
           echo ""
           echo "$storage_service service added to the rclone configuration file."
       fi
fi


# 6.1 swift configuration

if $use_swift; then
    #authentication either with swift or curl
    if [[ $auth_method == "curl" ]];  then
      ## This section replaces swift auth based authentication
      ##
      # authenticates and save token to environment variable
      
 
      os_auth_data='{ "auth": { "identity": { "methods": [ "password" ], "password": { "user": { "id": "'$OS_USERNAME'",
                     "password": "'$OS_PASSWORD'" } } }, "scope": { "project": { "domain": { "id": "default" }, "name": "'$OS_PROJECT_NAME'" } } } } '

      # authenticate and get return values
      #echo curl -sS -X POST -D - -d '@-' -H 'Content-Type: application/json' "$OS_AUTH_URL" 2>&1 '<<<' "$OS_AUTH_DATA"
      curl_out=$(curl -sS -X POST -D - -d '@-' -H 'Content-Type: application/json' "${OS_AUTH_URL}/auth/tokens" 2>&1 <<< "$os_auth_data")
      curl_exit="$?"
      curl_status=`echo "$curl_out" | grep '^HTTP/1.1 201 Created' | wc -l | tr -d ' '`
      if [ "$curl_exit" != "0" -o "$curl_status" != "1" ]; then
            echo "FAILED" >&2
            echo "$curl_out" | grep -E '^HTTP|{|}|^curl:' >&2
      else
           # save token to environment variable
           export OS_AUTH_TOKEN=`echo "$curl_out"|tr -d '\r'|grep "$token_header_re"|sed "s/$token_header_re//"`

           # save also the storage url, figure it out with just basic tools without dependency to any json tool
           export OS_STORAGE_URL=`echo "$curl_out"|tr '}' '\n'|grep "$storage_url_re"|grep "$storage_url_interface_re"|sed "$storage_url_sed"`
      fi
    else
       if command -v openstack >/dev/null 2>&1; then
         activePythonPath=$PYTHONPATH
         unset PYTHONPATH
         export OS_PROJECT_ID=$(openstack project show -f value -c id $OS_PROJECT_NAME)
         export PYTHONPATH=$activePythonPath     
       fi
       eval "$(swift auth)"
    fi

    if [[ $(grep -c "\[${storage_service}\]" $rconf 2> /dev/null) -lt 1 ]]; then
        mkdir -p  ${rconf%/*}
        printf "%s\n" >> $rconf \
            "[${storage_service}]" \
	    "type = swift" \
	    "env_auth = true"
        $echop "$storage_service service added to '$rconf'."
    fi

    if [ -z "${OS_AUTH_TOKEN}" ] ; then
        echo "Error: Swift authentication failed!" >&2
        echo "Are you sure that the password and project ID are valid?" >&2
        echo "Please try again."  >&2
        return 1
    else
        $echop "$storage_service connection configured successfully."
        if $active_mode; then
            export ACTIVE_TOKEN=$(launch_atoken $$)
            $echop "ACTIVE_TOKEN launched"
        else   
            echo "Connection stays active for eight hours."
            #echo "Connection stays active until:"
            #allas-token-lifetime | grep expires | awk '{print $2}' | cut -c2-20 | tr "T" " "
        fi
    fi
fi


# 6.2 s3cmd configuration

if $use_s3cmd; then

    activePythonPath=$PYTHONPATH
    unset PYTHONPATH

    export OS_PROJECT_ID=$(openstack project show -f value -c id $OS_PROJECT_NAME)
    openstack project show $OS_PROJECT_NAME

    local ACCESS_KEY=$(
        openstack ec2 credentials list -f value | grep $OS_PROJECT_ID | tail -1 | awk '{print $1}')
   if [ -z "$ACCESS_KEY" ]; then
     openstack ec2 credentials create
     local ACCESS_KEY=$(openstack ec2 credentials list -f value | grep $OS_PROJECT_ID | tail -1 | awk '{print $1}')
   fi

   local SECRET_KEY=$(openstack ec2 credentials list -f value | grep $OS_PROJECT_ID | tail -1 | awk '{print $2}')

   echo -e "\n\n\n\n\n\n\n\n\n\ny\n" | \
       s3cmd --configure \
             --access_key=$ACCESS_KEY \
             --secret_key=$SECRET_KEY \
             --host=a3s.fi \
             --signature-v2 \
             --multipart-chunk-size-mb=$chunk_size \
             --host-bucket='%(bucket)s.a3s.fi' -c $HOME/.s3cfg
   echo ""
   echo "s3cmd configuration ready."

   #aws.s3 conf   
   mkdir -p $HOME/.aws
   echo '[default]' > $HOME/.aws/credentials
   echo AWS_ACCESS_KEY_ID="$ACCESS_KEY" >> $HOME/.aws/credentials 
   echo	AWS_SECRET_ACCESS_KEY="$SECRET_KEY" >> $HOME/.aws/credentials
   chmod go-rwx $HOME/.aws/credentials

   export PYTHONPATH=$activePythonPath

 #  s3cmd --configure --access_key=$ACCESS_KEY --secret_key=$SECRET_KEY \
 #  --host=object.pouta.csc.fi --signature-v2 --multipart-chunk-size-mb=$chunk_size \
 #  --host-bucket='%(bucket)s.object.pouta.csc.fi' -c $HOME/.s3cfg 
fi

## 7. Create allas_default and unset some variables
#reset allas_default
echo "os_project_name=$OS_PROJECT_NAME" > $HOME/.allas_default
echo "user=$OS_USERNAME" >>  $HOME/.allas_default

# unset variables unnecessary for token access or user/project info for the user
unset OS_AUTH_URL
unset OS_USER_DOMAIN_NAME
if ! $keep_password; then
  unset OS_PASSWORD
fi
unset OS_REGION_NAME
unset OS_INTERFACE
unset OS_IDENTITY_API_VERSION



}

allas_conf_scope "$@"
unset -f allas_conf_scope
