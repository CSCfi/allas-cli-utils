#!/bin/bash 
#function to check that swift works
check_swift_connection () {
    if [[ -n "$OS_PASSWORD" ]]; then
         if  [[ $silent -eq 0 ]] ; then
          echo "Updating token"
         fi
         source $allas_conf_path --user $user -k $OS_PROJECT_NAME -f
         echo "swift connection updated"
    fi

    test=$(rclone about ${storage_server}: 2> /dev/null | wc -l)
  
    if [[ $test -lt 1 ]]
    then 
        echo "No connection to Allas!"
        echo "Please try setting the the connection again."
        exit 1
    else 
       echo "swift connection OK" 
    fi 
}

#Function to remove the trailing / if it exist
remove_slash_from_ends(){
path_string=$1
if [[ ${path_string:(-1)} == "/" ]]; then
    path_string=${path_string%/}
fi

if [[  ${path_string:0:1} == "/" ]]; then
    tlen=${#path_string}
    path_string=${path_string:1:tlen}
fi

echo $path_string
}




help=0
obj_path=0
id=0
#Process command line
while [[ $# -ge 1 ]]
do
  case "$1" in           
             '--bucket' | '-b' )
                  obj_path=($2)             
                  obj_path=$(remove_slash_from_ends $obj_path)  

                   bucket=$(echo $obj_path | awk -F / '{print $1}')
                   #split bucket and object if needed
                   if [[ $obj_path != $bucket ]]; then
                      prefix_string=$(echo $1 | sed -e s/"${bucket}\/"/""/)                      
                   fi

                  shift
                  shift 
                ;;
              '--id' | '-i' )
                  project_id="$2"
                  shift
                  shift
              ;;
              '--help' | '-h' )
                  help=1
                  shift
              ;;
     esac
done

if [[ $obj_path == "0" ]];then
  echo ""
  echo "ERROR: target bucket was not defined"
  echo "Please use -b to define bucket, and pseudofolder if needed, for this operation"
  echo ""
  help=1
fi

if [[ $project_id == "0" ]];then
  echo ""
  echo "ERROR: target object was not defined"
  echo "Please use -i to define the ID string of the project for which the S3 permissions are granted."
  echo ""
  help=1
fi


if [[ $help -eq 1 ]]; then
cat <<EOF
Command syntax:
  
   allas-add-S3-permissions -b bucket -i project-id-string

EOF
exit 
fi


echo "Giving S3 read and write permissions for project $project_id"
echo " to every object in: $obj_path ."


for obj in $(a-list $obj_path)
do 
   #echo $obj
   #echo " s3cmd setacl --acl-grant=read:$project_id s3://$obj"
   s3cmd setacl --acl-grant=all:$project_id s3://$obj

   #check of this has segments to fix
   obj_only=$(echo $obj | sed -e s/"${bucket}\/"/""/)
   manifest=$(swift stat $bucket $obj_only | grep "Manifest:" | awk '{print $2}')
   if [[ $manifest != "" ]]; then
     for seg in $(a-list $manifest)
     do
        s3cmd setacl --acl-grant=all:$project_id s3://$seg
     done
  fi
done

