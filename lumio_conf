#!/bin/bash


# check if this is executed as sourced command
shell_check=`ps -hp $$|awk '{print $5}'| grep -c bash `


if [[ $shell_check -ne 1 ]]; then
   echo " lumio_conf is written for bash shell."
   my_shell=`ps -hp $$|awk '{print $5}'`
   echo " You are using $my_shell shell."
   echo " This may cause this command to fail."
   sleep 3
fi


export OS_PROJECT_NAME=""
export OS_PROJECT_ID=""
export OS_STORAGE_URL=""
export OS_AUTH_TOKEN=""
export OS_USERNAME=$(whoami)
export OS_AUTH_URL="" # go to https://auth.lumidata.eu
export OS_USER_DOMAIN_NAME="Default"
export OS_REGION_NAME="regionOne"
export OS_INTERFACE=public
export OS_IDENTITY_API_VERSION=3



lumio_conf_scope () {

local usage="

Usage: source lumio_conf [OPTIONS] [PROJECT]

    This bash script sets up the environment variables and the configuration
    files for accessing LUMI-O storage service.

    Lumi-O

    With option --lumi, this script can be used to configure S3 based connection to
    Lumi-O. In that case you need to use seprate web server (https://auth.lumidata.eu/)
    to create authentication keys for Lumi-O. Authentication server provides key strings
    based of which this script creates configuration files for rclone, S3 and S3cmd.

    Note that you can have active connection to multiple object storage systems like LUMI-O in the same time
    but in that case you must indicate the stroage server to be used in the commands
    you are using.


    OPTIONS
    -------

     -c, --chuncksize SIZE    s3cmd chunk size, 5-5000, Files larger than
                              SIZE, in MB, are automatically uploaded
                              multithread-multipart  (default: 5000)

     -p, --project            Define LUMI-project to be used.

     -s, --silent             Less output

     -f, --force              Skip check that tries to ensure that this command is
                              sourced correctly. This option needs to be used in batch jobs.

     --s3remove               Remove S3 access key for an LUMI-O project.
"

local storage_service=("lumio")
local show_keys=false
local keep_password=false
local silent_mode=false
local active_mode=false
local echop=echo
local chunk_size=5000
local rconf=$HOME/.config/rclone/rclone.conf
local mode=swift
local force=false
#auth_method options are curl and swift
local auth_method=curl
#these are used in curl authentication
local storage_url_interface_re='"interface": "public"'
local s3remove=false
local debug=false
local devnull="/dev/null"
local ood=false
#project_list_method options are curl and openstack
local project_list_method=curl

# Process command line arguments

while [[ $# -ge 1 ]]; do
    case "$1" in
        '-h'|'-help'|'--help')  echo "$usage";           return 0;;
        '-w'|'--show_keys')     show_keys=true;          shift;;
        '-k'|'--keeppasswd')    keep_password=true;      shift;;
        '-s'|'--silent')        echop=:;                 shift;;
        '-c'|'--chunksize')     chunk_size="$2";         shift 2;;
        '-f'|'--force' )        force=true;              shift;;
        '--s3remove' )          mode=s3remove;           shift;;
        '--debug' )             debug=true;              shift;;
        '-p'|'--project' )
          if [[ -z $2 ]]; then
              if [[ ${2::1} != "-" ]];then
                export OS_PROJECT_NAME="$2"
                shift
              else
                export OS_PROJECT_NAME=""
              fi
          else
              export OS_PROJECT_NAME=""
          fi
          shift
          ;;
        *) export OS_PROJECT_NAME="$1";                  shift;;
    esac
done


if [ ${0:(-4):4} != "bash" -a "$force" == "false" ]; then
    echo "Error: lumio_conf should not be executed directly. $usage" >&2
    exit 1
fi
case "$mode" in
    's3remove')
        local use_s3cmd=false
        local s3remove=true
        ;;
    *)
        local use_s3cmd=true
        mode=lumi
        ;;
esac



echo "Mode $mode"

if [[ $mode == "lumi" ]]; then

   echo "Please login to  https://auth.lumidata.eu/"
   echo "In the web interface, choose first the project you wish to use."
   echo "Next generate a new key or use existing valid key"
   echo "Open the Key details view and based on that give following information"
   echo "Lumi Project Number: "
   read lumi_project_number
   lumi_project_number=$(echo $lumi_project_number | tr -d " ")
   echo "Access key:"
   read lumi_access_key
   lumi_access_key=$(echo $lumi_access_key | tr -d " ")
   echo "Secret key:"
   read lumi_secret_key
   lumi_secret_key=$(echo $lumi_secret_key | tr -d " ")

   #S3 parameters
   export AWS_ACCESS_KEY_ID="$lumi_access_key"
   export AWS_SECRET_ACCESS_KEY="$lumi_secret_key"
   export S3_ACCESS_KEY_ID="$lumi_access_key";
   export S3_SECRET_ACCESS_KEY="$lumi_secret_key";
   export S3_HOSTNAME=lumidata.eu;
   storage_service="lumi"
   export OS_PROJECT_NAME=$lumi_project_number

   #rclone parameters
   rclone config delete lumi-o
   rclone config delete lumi-pub
   mkdir -p  $HOME/.config/rclone/
   echo "" >> $HOME/.config/rclone/rclone.conf
   chmod go-rwx $HOME/.config/rclone/rclone.conf
   echo '[lumi-o]' >>  $HOME/.config/rclone/rclone.conf
   #echo '['$storage_service']' >>  $HOME/.config/rclone/rclone.conf
   echo 'type = s3' >>  $HOME/.config/rclone/rclone.conf
   echo 'provider = Ceph' >>  $HOME/.config/rclone/rclone.conf
   echo 'env_auth = false' >>  $HOME/.config/rclone/rclone.conf
   echo "access_key_id = $S3_ACCESS_KEY_ID" >> $HOME/.config/rclone/rclone.conf
   echo "secret_access_key = $S3_SECRET_ACCESS_KEY" >> $HOME/.config/rclone/rclone.conf
   echo 'endpoint = https://lumidata.eu' >>  $HOME/.config/rclone/rclone.conf
   echo 'acl = private' >>  $HOME/.config/rclone/rclone.conf

   echo "rclone remote lumi-o: now provides an S3 based connection to Lumi-O storage area of project $lumi_project_number."
   echo ""
   echo ""  >>  $HOME/.config/rclone/rclone.conf
   echo '[lumi-pub]' >>  $HOME/.config/rclone/rclone.conf
   #echo '['$storage_service']' >>  $HOME/.config/rclone/rclone.conf
   echo 'type = s3' >>  $HOME/.config/rclone/rclone.conf
   echo 'provider = Ceph' >>  $HOME/.config/rclone/rclone.conf
   echo 'env_auth = false' >>  $HOME/.config/rclone/rclone.conf
   echo "access_key_id = $S3_ACCESS_KEY_ID" >> $HOME/.config/rclone/rclone.conf
   echo "secret_access_key = $S3_SECRET_ACCESS_KEY" >> $HOME/.config/rclone/rclone.conf
   echo 'endpoint = https://lumidata.eu' >>  $HOME/.config/rclone/rclone.conf
   echo 'acl = public-read' >>  $HOME/.config/rclone/rclone.conf

   echo "rclone remote lumi-pub: now provides an S3 based connection to Lumi-O storage area of project $lumi_project_number."
   echo ""

   #S3cmd parameters
   rm -f $HOME/.s3cfg
   echo '[lumi-'${lumi_project_number}']' > $HOME/.s3cfg
   echo "access_key   = $S3_ACCESS_KEY_ID" >> $HOME/.s3cfg
   echo "secret_key   = $S3_SECRET_ACCESS_KEY"  >> $HOME/.s3cfg
   echo "host_base    = https://lumidata.eu" >> $HOME/.s3cfg
   echo "host_bucket  = https://lumidata.eu" >> $HOME/.s3cfg
   echo "human_readable_sizes = True" >> $HOME/.s3cfg
   echo "enable_multipart = True" >> $HOME/.s3cfg
   echo "signature_v2 = True" >> $HOME/.s3cfg
   echo "use_https = True" >> $HOME/.s3cfg

    # define Lumi-o in customer defaults
     if [[ -e $HOME/.lp_tools_conf ]]; then
        grep -v "storage_service=" $HOME/.lo_tools_conf | grep -v "mode=" | grep -v "os_project_name=" > $HOME/.lo_tools_conf_$$
        rm -f $HOME/.lp_tools_conf
        mv  $HOME/.lp_tools_conf_$$ $HOME/.lo_tools_conf
     fi
     echo "storage_service=lumi" >> $HOME/.lo_tools_conf
     echo "mode=lumi" >> $HOME/.lo_tools_conf
     echo "os_project_name=${lumi_project_number}" >> $HOME/.lo_tools_conf
   return
fi


if [[ "$chunk_size" -lt 5 || "$chunk_size" -gt 5000 || \
          ! "$chunk_size" =~ ^[0-9]+$ ]]; then
    echo "\nError: Invalid chuck size. $usage" >&2
    return 1
fi

if ! $keep_password; then
    trap 'unset OS_PASSWORD; trap - RETURN EXIT SIGINT' RETURN EXIT SIGINT
fi




if $use_s3cmd && ! command -v s3cmd >/dev/null 2>&1; then
        echo -e "\nError: s3cmd command not found!" >&2
        return 1
fi


if ! command -v rclone >/dev/null 2>&1; then
    echo "NOTE: rclone command was not found."
fi

if ! command -v restic >/dev/null 2>&1; then
    echo "NOTE: restic command was not found."
fi

if ! command -v curl >/dev/null 2>&1; then
    echo "NOTE: curl command was not found."
fi




# Assign the project to be used.

if [ -z "$OS_PROJECT_NAME" ]; then
   echo "Checking projects available for your account."
   echo "Please wait."

   #unset pythonpath temporarily
   activePythonPath=$PYTHONPATH
   unset PYTHONPATH

   if [[ $project_list_method == "curl" ]];  then
      ## This section replaces openstack based project listing
      ##

      local os_auth_data_unscoped='{ "auth": { "identity": { "methods": [ "password" ], "password": { "user": { "id": "'$OS_USERNAME'",
         "password": "'$OS_PASSWORD'" } } } } }'

      # get an unscoped token
      local curl_out=`curl -sS -X POST -D - -d '@-' -H 'Content-Type: application/json' "$OS_AUTH_URL/auth/tokens" 2>&1 <<< "$os_auth_data_unscoped"`
      local curl_exit="$?"
      local curl_status=`echo "$curl_out" | grep '^HTTP/[0-9\.]* 201 Created' | wc -l | tr -d ' '`
      if [ "$curl_exit" != "0" -o "$curl_status" != "1" ]; then
         echo "FAILED" >&2
         echo "$curl_out" | grep -E '^HTTP|{|}|^curl:' >&2
         unset OS_PASSWORD
      else
         local os_auth_token_unscoped=`echo "$curl_out"|tr -d '\r'|grep "$token_header_re"|sed "s/$token_header_re//"`

         # get the project list authenticating with the unscoped token
         local curl_out=`curl -s -S -X GET -D - -H "X-Auth-Token: $os_auth_token_unscoped" "$OS_AUTH_URL/auth/projects" 2>&1`
         local curl_exit="$?"
         local curl_status=`echo "$curl_out" | grep '^HTTP/[0-9\.]* 200 OK' | wc -l | tr -d ' '`
         if [ "$curl_exit" != "0" -o "$curl_status" != "1" ]; then
            echo "FAILED" >&2
            echo "$curl_out" | grep -E '^HTTP|{|}|^curl:' >&2
            unset OS_PASSWORD
         fi

         # figure the project list out with just basic tools without dependency to any json tool
         local all_projects=($(echo "$curl_out"|grep -E '{|}'|tr '[},]' '\n'|grep '"name"' | sed 's/^ "name": "\(.*\)"/\1/'))
      fi
   else
      local all_projects=(
          $(openstack project list \
                      --my-projects -c Name -f value --os-username $OS_USERNAME))
   fi

   case ${#all_projects[@]} in
       0)
           echo "Error: No LUMI-O projects found!" >&2
           echo "Please check that you typed your password correctly" >&2
           return 1
           ;;
       1)
           export OS_PROJECT_NAME=${all_projects[0]}
           export OS_PROJECT_ID=$(openstack project show -f value -c id $OS_PROJECT_NAME)
           ;;
       *)
           PS3="Please choose a project by giving an item number from the list above: "
           local project
           local lumio_projects

           if ! command -v csc-projects >/dev/null 2>&1; then
             select project in "${all_projects[@]}" "abort lumio_conf"; do
                 [[ -n "$project" ]] && break
             done
           else
             # if csc-projects is available, show the project names
             for g in ${all_projects[@]}
             do
                title=$(csc-projects -p ${g} -o T | grep -v "no such file or directory" | grep -v "Failed to generate project")
                lumio_projects+=("${g}  ${title}")
             done
             select lumio_project in "${lumio_projects[@]}" "abort lumio_conf"; do
                 [[ -n "$lumio_project" ]] && break
             done
             project=$(echo "$lumio_project" | awk '{print $1}')
           fi
	   if [[ "$project" == "abort lumio_conf" || "$project" == "abort" ]]; then
	       return 1
	   fi
           export OS_PROJECT_NAME=$project
           ;;
   esac
   export PYTHONPATH=$activePythonPath
fi

#rclone configuration file check
if [[ $(grep -c "\[$storage_service\]"  $HOME/.config/rclone/rclone.conf 2> /dev/null ) -lt 1 ]]; then
       mkdir -p  $HOME/.config/rclone/
       echo '['"$storage_service"']' >> $HOME/.config/rclone/rclone.conf
       echo 'type = swift' >>  $HOME/.config/rclone/rclone.conf
       echo 'env_auth = true'  >>  $HOME/.config/rclone/rclone.conf
       if [[ $silent_mode = "false" ]]; then
           echo ""
           echo "$storage_service service added to the rclone configuration file."
       fi
fi

echo "Configuration will be done for project: $OS_PROJECT_NAME"

if $use_s3cmd; then
   echo "  S3"
fi

if $s3remove; then
   echo "  S3"
fi




# 6.2 s3cmd configuration
# Fix me  (fetch from auth.lumidata.eu)

# Option to remove s3cmd key
if $s3remove; then

    echo ""
    echo "s3 access key removal requested for project $OS_PROJECT_NAME requires access https://auth.lumidata.eu portal"

fi



## 7. Create lumio_default and unset some variables
#reset lumio_default
echo "os_project_name=$OS_PROJECT_NAME" > $HOME/.lumio_default
echo "user=$OS_USERNAME" >>  $HOME/.lumio_default

# unset variables unnecessary for token access or user/project info for the user
# These need to be kept if you want to use openstack
if ! $keep_password; then
 unset OS_AUTH_URL
 unset OS_USER_DOMAIN_NAME
 unset OS_PASSWORD
 unset OS_REGION_NAME
 unset OS_INTERFACE
 unset OS_IDENTITY_API_VERSION
fi

}

function rclone() {
  if [[ "$1" = 'info' ]]; then
    echo 'Do not use rclone command "info"' >&2
    else command rclone "$@"
  fi
}


lumio_conf_scope "$@"
unset -f lumio_conf_scope
