#!/bin/bash 


if [[ $# -lt 1 ]]
then
  echo "Please give the at least the 1) operation (add, list, find, retrieve, delete) and 2) name of a directory or file 
  to be backuped to allas as an argument of this command."
  echo ""
  exit 1
fi

if [[ $1 == "add" || $1 == "list" ||  $1 == "restore" || $1 == "delete" || $1 == "find" ]]
then
   task=("$1")
   shift
else
   echo "$1 is not a valid task for a_backup"
   echo "Please define one of the following tasks as the first argument."
   echo "  add, list, restore, delete or find"
   exit 1
fi


os_project_name=$OS_PROJECT_NAME
project_label=$(echo ${os_project_name} | sed -e s/"project_"/""/g)
bucket_name=("${project_label}-BACKUP")
repository=("swift:${bucket_name}:/backup")
rpath=("")
input=("")
options=("")
target=(./)
help=(0)

#Process command line
while [[ $# -ge 1 ]]
do
  case "$1" in
              '-repo')
                repository=$2
                shift
                shift
              ;;
               '-project')
                  os_project_name=($2)
                  shift
                  shift
              ;;
               '-path')
                options=("$options --path $2")
                shift
                shift
              ;;
               '-last')
                options=("$options --last")
                shift
              ;;
              '-target')
                target=("$2")
                shift
                shift
              ;;

              '-h')
                help=("1")
                shift
              ;;


               *)
                if [[ $input == "" ]]
                then
                   input=("$1")
                   shift
                else 
                   options=("$options $1")
                   shift
                fi
              # No more switches
              ;;
    esac
done

if [ $task == "add" ]; then
  if [ ! -e $input ] ; then
     echo "File or directory $input does not exist!"
     exit 1
  fi
fi


if [[ $(which restic 2>/dev/null | wc -c) -eq 0 ]]
   then 
        echo "restic command not found!"
        echo ""
        echo "restic (https://restic.readthedocs.io) must be installed" 
        echo "and in command path in order to use this tool"
        echo ""
        return
fi



if [ $help -eq 1 ]; then
cat <<EOF

a_backup

a_backup tool provides easy to use command line interface to the restic back up tool.
(https://restic.readthedocs.io/). a_backup automaically creates a project specific back up 
reposoitory to the Allas storage service at CSC and uses that for making comulative back ups.

In order to use this tool, you must first open connection to Allas storage service with
command:
   source /appl/opt/allas_conf

The connection remains open for three hours.


BACKUP OPERATIONS

a_backup can be used for following five operations:

  a_backup add <file_name>   Add a new backup version (snapshot) of the given file 
                             or directory to the back up repository.

  a_backup list              Lists the snapshots saved to the repository. 
                             Option: -last lists only the latest versions of different snapshots.

  a_backup find <query>      Find snapshots that contain file or directory that match the given query term.

  a_backup restore <snapshot_id>  Retrieves the data of the given snapshot to the local environment. By default the
                             stored data is restored to the local directorty. Other locations can be defined with
                             -target option.

  a_backup delete <snapshot_id>  Deletes a snapshot from the backup repository.


EOF
exit 0
fi


test=$(swift stat 2> /dev/null | grep -c "Account:")
if [[ $test -lt 1 ]]
then
   echo ""
   echo "Allas connection is not set up or has expired!"
   echo "Please run command:"
   echo "   source /appl/opt/allas_conf"
   exit 1
fi

project_label=$(echo ${os_project_name} | sed -e s/"project_"/""/g)
bucket_name=("${project_label}-BACKUP")
repository=("swift:${bucket_name}:/backup")

if [ ! -e $HOME/.backup_passwd_${project_label} ]
then
  echo restic_$project_label >  $HOME/.backup_passwd_${project_label}
fi 

#check if restic repository already exists
#echo "restic -r $repository -p $HOME/.backup_passwd_${project_label} snapshots"
snum=$(restic -r $repository -p $HOME/.backup_passwd_${project_label} snapshots 2> /dev/null | wc -l)
if [ $snum -lt 1 ]
then
   restic init --repo $repository -p $HOME/.backup_passwd_${project_label} $options
fi 


if [ $task == "add" ]
then
  restic backup  --repo $repository -p $HOME/.backup_passwd_${project_label} --tag $USER  $input
fi

if [ $task == "list" ]
then
  #echo "restic snapshots --repo $repository -p $HOME/.backup_passwd_${project_label} $input $options"
  restic snapshots --repo $repository -p $HOME/.backup_passwd_${project_label} $input $options
fi

if [ $task == "find" ]
then
  echo "-------------------------------------------------------"
  #echo "restic find --repo $repository -p $HOME/.backup_passwd_${project_label} $options"
  restic find --repo $repository -p $HOME/.backup_passwd_${project_label} $input $options > .find_list_$$
  numhits=$(grep -v "Found matching entries" .find_list_$$ | grep . | wc -l)
  numsn=$(grep "Found matching entries" .find_list_$$ | grep . | wc -l)
  cat  .find_list_$$
  echo ""
  echo "$numhits hits in $numsn snapshots found for queryterm: $input"
  rm -f  .find_lits_$$
fi

if [ $task == "restore" ]
then
  restic restore --repo $repository -p $HOME/.backup_passwd_${project_label} $input --target $target $options
fi
  
if [ $task == "delete" ]
then
  restic forget --prune --repo $repository -p $HOME/.backup_passwd_${project_label} $input 
fi 
