#!/bin/bash 

#default user
user=($USER)


#read static variables
inst_root=$(dirname $(readlink -f $0))
source $inst_root/a_env_conf

#local variables
object_name=("")
print_help=(0)
os_project_name=("none")
input_def=("")
mode=("swift")
tmp_dir=("${tmp_root}/a_get_$$_tmp")
show_filelist=(0)
query=("")
object_with_bucket=(0)

#Process command line
while [[ $# -ge 1 ]]
do
  case "$1" in
             '--object' | '-o' )
             # query file
                  object_name=($2)
                  shift
                  shift
                ;;
             '--project' | '-p' )
                  os_project_name=($2)
                  shift
                  shift
                ;;

             '--bucket' | '-b' )
                  bucket=($2)
                  object_with_bucket=(2)
                  shift
                  shift 
                ;;
             '--help' | '-h' )
                  print_help=(1)
                  shift
                ;;
             *)
                   if [[ $object_name != "" ]]; then
                      echo "unknown option: $1"
                      echo "Object name is: $object"
                      exit 1
                   fi
                   object_name=("$1")
                   shift                       # No more switches
                ;;
    esac
done



if [ $print_help -eq 1 ]; then
cat <<EOF
This tool is used to show information about a data object that has been uploaded to Allas service using the a-put command.
The basic syntax of the comand is:

   a-info object_name


Options:

-p, --project <project_ID>   Delete objects form the buckets of the defined project in stead of the currently configured project. 

-b, --bucket                 Object name includes bucket name and the command does not try to use the default bucket names.


Related commands: a-put, a-get, a-delete, a-find

EOF
exit 0
fi 

#Configure rclone
if [ ! -e $HOME/.config/rclone ]
then 
  mkdir -p  $HOME/.config/rclone
fi
if [ -e $HOME/.config/rclone/rclone.conf ]
then 
   rc_check=$(grep -c $storage_server $HOME/.config/rclone/rclone.conf)
   if [ $rc_check -lt 1 ]
   then
      echo '[pouta]' >>  $HOME/.config/rclone/rclone.conf
      echo 'type = swift'  >>  $HOME/.config/rclone/rclone.conf
      echo 'env_auth = true'   >>  $HOME/.config/rclone/rclone.conf
   fi
else
   echo '[pouta]' >>  $HOME/.config/rclone/rclone.conf
   echo 'type = swift'  >>  $HOME/.config/rclone/rclone.conf
   echo 'env_auth = true'   >>  $HOME/.config/rclone/rclone.conf 
fi

#Assign project to be used if not defined 
if [ $os_project_name == "none" ]
then
  if [ -e $HOME/.allas_default ]
  then
     source $HOME/.allas_default
     #echo      $os_project_name    $OS_PROJECT_NAME
     if [[ $os_project_name != $OS_PROJECT_NAME ]]
     then 
        echo "Switching allas configuration to use project $os_project_name"
        source $allas_conf_path -user $user $os_project_name -keeppasswd
        export OS_PROJECT_NAME=$os_project_name
     fi 
  else
     echo "Default project is not defined"
     source  $allas_conf_path -user $user
     echo "os_project_name=$OS_PROJECT_NAME" > $HOME/.allas_default
     echo "Default allas project is stored to  \$HOME/.allas_default"
     echo ""
  fi
  else
     echo "Switching allas configuration to use project $os_project_name"
     source $allas_conf_path -user $user $os_project_name -keeppasswd
     export OS_PROJECT_NAME=$os_project_name
fi

#source $HOME/.allas_default
project_label=$(echo ${os_project_name} |  sed -e s/"project_"/""/g)

#Check if connection works
if [[ $mode == "swift" ]]
then
  test=$(swift stat 2> /dev/null | grep -c "Account:")
  if [[ $test -lt 1 ]]
  then 
    echo "No connection to Allas!"
    echo "Please try setting the the connection again."
    echo "by running command:"
    echo ""
    echo "   source $allas_conf_path"
    exit 1
  fi 
fi

if [[ $object_name == "" ]] ; then 
  a-find
  echo ""
  echo "Total summary of data in ${storage_server}"
  rclone about ${storage_server}:
  exit
fi
#source /appl/opt/allas_conf
#input=("$1")
if [[ $object_with_bucket == 2 ]]; then
     object_name=("${bucket}/${object_name}")
     object_with_bucket=(1)
fi

# this checks os objectname contains bucket name
check_os=$(rclone ls ${storage_server}:$object_name 2> /dev/null | wc -l)
if [ $check_os -eq 1 ]; then
  object_with_bucket=(1)
fi

# check if object name contains bucket (if not defined with bucket)
if [[ $object_with_bucket == 0 ]]; then
  if [ $(echo $object_name | grep -c "${user}-${project_label}-MISC" ) -eq 1 ]
  then 
    object_with_bucket=(1) 
    bucket=("${user}-${project_label}-MISC")
  fi
  if [ $(echo $object_name | grep -c "${user}-${project_label}-HOME" ) -eq 1 ]
  then 
    object_with_bucket=(1) 
    bucket=("${user}-${project_label}-HOME")
  fi
  if [ $(echo $object_name | grep -c "${user}-${project_label}-SCRATCH" ) -eq 1 ]
  then 
    object_with_bucket=(1) 
    bucket=("${user}-${project_label}-HOME")
  fi
fi 

# check all buckets if the bucket is not deifned
if [ $object_with_bucket == 0 ]
then
  buckets=("${user}-${project_label}-MISC ${user}-${project_label}-HOME ${user}-${project_label}-SCRATCH")
  num_buckets=(0)

  # go through the buckets
  for bn in $buckets
  do 
    bucket_found=$(rclone ls ${storage_server}:$bn/$object_name 2> /dev/null | wc -l)
    if [ $bucket_found -eq 1 ]; then
       echo "Bucket: $bn contains object:$object_name"
      (( num_buckets = num_buckets + 1 ))
      bucket=("$bn")
    fi
  done
  
  if [[ $num_buckets -eq 0 ]]; then
     echo ""
     echo "Could not find object: $object_name "
     exit 1
  fi
  if [[ $num_buckets -gt 1 ]]; then
     echo ""
     echo "Object $object_name was found in several buckets!"
     echo "Please include the bucket name in the object name"
     exit 1
  fi
  
  #add bucket to the object name
  object_name=("$bucket/$object_name")
else
  #check if object exists
  bucket_found=$(rclone ls ${storage_server}:/$object_name 2> /dev/null | wc -l)
  if [ $bucket_found -ne 1 ]; then
     echo ""
     echo "Object $object_name was not found"
     echo ""
     echo "You can list all the available objects with command:"
     echo "   a-find"
  fi
fi 
  
rclone lsl ${storage_server}:/${object_name}
rclone cat ${storage_server}:/${object_name}_ameta


exit


























